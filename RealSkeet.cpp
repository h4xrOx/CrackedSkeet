/*******************************************************************************
	Generated by: DLL to C version 3.62
	Date: 2021-8-1
	Description: The implementation code for RealSkeet.dll.
	Website: http://www.dll-decompiler.com
	Technical Support: support@dll-decompiler.com
*******************************************************************************/

#include "stdafx.h"
#include "RealSkeet.h"


extern stRealSkeet_text RealSkeet_text;
extern stRealSkeet_rdata RealSkeet_rdata;
extern stRealSkeet_data RealSkeet_data;
extern stRealSkeet_retard0 RealSkeet_retard0;
extern UCHAR RealSkeet_retard1[0x58D000];
extern UCHAR RealSkeet_vmpdmp[0x0];

__declspec(align(16)) stRealSkeet RealSkeet;

void* __stdcall RealSkeet_RVA(DWORD rvaAddr)
{
	if(rvaAddr==0)
		return g_hRealSkeet;
	if(rvaAddr >= 0 && rvaAddr < 0xB99000)
		return (UCHAR*)&RealSkeet + rvaAddr;

	return NULL;
}

BOOL RealSkeet_Init()
{
	HMODULE hDll;
	DWORD oldProtect;
	DWORD nCodeSize;
	void (*fInitData)(HMODULE,void*,void*);

	oldProtect = PAGE_EXECUTE_READWRITE;
	nCodeSize = RealSkeet_text(RealSkeet_CodeEnd) - RealSkeet_text(RealSkeet_CodeStart);
	VirtualProtect(RealSkeet_text(RealSkeet_CodeStart),nCodeSize,PAGE_EXECUTE_READWRITE,&oldProtect);

	memcpy(&RealSkeet.Text,&RealSkeet_text,sizeof(RealSkeet_text));
	memcpy(&RealSkeet.Rdata,&RealSkeet_rdata,sizeof(RealSkeet_rdata));
	memcpy(&RealSkeet.Data,&RealSkeet_data,sizeof(RealSkeet_data));
	memcpy(&RealSkeet.Retard0,&RealSkeet_retard0,sizeof(RealSkeet_retard0));
	memcpy(&RealSkeet.Retard1,&RealSkeet_retard1,sizeof(RealSkeet_retard1));
	memcpy(&RealSkeet.Vmpdmp,&RealSkeet_vmpdmp,sizeof(RealSkeet_vmpdmp));

	hDll = ::LoadLibraryA("KERNEL32.dll");
	if(!hDll)
	{
#ifdef _DEBUG
		MessageBoxA(NULL,
			"Please copy the dependent DLL \"KERNEL32.dll\" to the working directory.",
			"Load DLL Failed",MB_OK|MB_ICONERROR);
#endif
		ASSERT(0);
		return FALSE;
	}
	*(FARPROC*)RealSkeet_VA(0x140B000) = ::GetProcAddress(hDll,"GetProcAddress");
	if(!*(FARPROC*)RealSkeet_VA(0x140B000))
		return FALSE;

	hDll = ::LoadLibraryA("USER32.dll");
	if(!hDll)
	{
#ifdef _DEBUG
		MessageBoxA(NULL,
			"Please copy the dependent DLL \"USER32.dll\" to the working directory.",
			"Load DLL Failed",MB_OK|MB_ICONERROR);
#endif
		ASSERT(0);
		return FALSE;
	}
	*(FARPROC*)RealSkeet_VA(0x140B008) = ::GetProcAddress(hDll,"ShowWindow");
	if(!*(FARPROC*)RealSkeet_VA(0x140B008))
		return FALSE;

	hDll = ::LoadLibraryA("MSVCP140.dll");
	if(!hDll)
	{
#ifdef _DEBUG
		MessageBoxA(NULL,
			"Please copy the dependent DLL \"MSVCP140.dll\" to the working directory.",
			"Load DLL Failed",MB_OK|MB_ICONERROR);
#endif
		ASSERT(0);
		return FALSE;
	}
	*(FARPROC*)RealSkeet_VA(0x140B010) = ::GetProcAddress(hDll,"?_Xout_of_range@std@@YAXPBD@Z");
	if(!*(FARPROC*)RealSkeet_VA(0x140B010))
		return FALSE;

	hDll = ::LoadLibraryA("WININET.dll");
	if(!hDll)
	{
#ifdef _DEBUG
		MessageBoxA(NULL,
			"Please copy the dependent DLL \"WININET.dll\" to the working directory.",
			"Load DLL Failed",MB_OK|MB_ICONERROR);
#endif
		ASSERT(0);
		return FALSE;
	}
	*(FARPROC*)RealSkeet_VA(0x140B018) = ::GetProcAddress(hDll,"InternetOpenA");
	if(!*(FARPROC*)RealSkeet_VA(0x140B018))
		return FALSE;

	hDll = ::LoadLibraryA("VCRUNTIME140.dll");
	if(!hDll)
	{
#ifdef _DEBUG
		MessageBoxA(NULL,
			"Please copy the dependent DLL \"VCRUNTIME140.dll\" to the working directory.",
			"Load DLL Failed",MB_OK|MB_ICONERROR);
#endif
		ASSERT(0);
		return FALSE;
	}
	*(FARPROC*)RealSkeet_VA(0x140B020) = ::GetProcAddress(hDll,"memcpy");
	if(!*(FARPROC*)RealSkeet_VA(0x140B020))
		return FALSE;

	hDll = ::LoadLibraryA("api-ms-win-crt-runtime-l1-1-0.dll");
	if(!hDll)
	{
#ifdef _DEBUG
		MessageBoxA(NULL,
			"Please copy the dependent DLL \"api-ms-win-crt-runtime-l1-1-0.dll\" to the working directory.",
			"Load DLL Failed",MB_OK|MB_ICONERROR);
#endif
		ASSERT(0);
		return FALSE;
	}
	*(FARPROC*)RealSkeet_VA(0x140B028) = ::GetProcAddress(hDll,"_c_exit");
	if(!*(FARPROC*)RealSkeet_VA(0x140B028))
		return FALSE;

	hDll = ::LoadLibraryA("api-ms-win-crt-utility-l1-1-0.dll");
	if(!hDll)
	{
#ifdef _DEBUG
		MessageBoxA(NULL,
			"Please copy the dependent DLL \"api-ms-win-crt-utility-l1-1-0.dll\" to the working directory.",
			"Load DLL Failed",MB_OK|MB_ICONERROR);
#endif
		ASSERT(0);
		return FALSE;
	}
	*(FARPROC*)RealSkeet_VA(0x140B030) = ::GetProcAddress(hDll,"rand");
	if(!*(FARPROC*)RealSkeet_VA(0x140B030))
		return FALSE;

	hDll = ::LoadLibraryA("api-ms-win-crt-stdio-l1-1-0.dll");
	if(!hDll)
	{
#ifdef _DEBUG
		MessageBoxA(NULL,
			"Please copy the dependent DLL \"api-ms-win-crt-stdio-l1-1-0.dll\" to the working directory.",
			"Load DLL Failed",MB_OK|MB_ICONERROR);
#endif
		ASSERT(0);
		return FALSE;
	}
	*(FARPROC*)RealSkeet_VA(0x140B038) = ::GetProcAddress(hDll,"fclose");
	if(!*(FARPROC*)RealSkeet_VA(0x140B038))
		return FALSE;

	hDll = ::LoadLibraryA("api-ms-win-crt-time-l1-1-0.dll");
	if(!hDll)
	{
#ifdef _DEBUG
		MessageBoxA(NULL,
			"Please copy the dependent DLL \"api-ms-win-crt-time-l1-1-0.dll\" to the working directory.",
			"Load DLL Failed",MB_OK|MB_ICONERROR);
#endif
		ASSERT(0);
		return FALSE;
	}
	*(FARPROC*)RealSkeet_VA(0x140B040) = ::GetProcAddress(hDll,"_time64");
	if(!*(FARPROC*)RealSkeet_VA(0x140B040))
		return FALSE;

	hDll = ::LoadLibraryA("api-ms-win-crt-heap-l1-1-0.dll");
	if(!hDll)
	{
#ifdef _DEBUG
		MessageBoxA(NULL,
			"Please copy the dependent DLL \"api-ms-win-crt-heap-l1-1-0.dll\" to the working directory.",
			"Load DLL Failed",MB_OK|MB_ICONERROR);
#endif
		ASSERT(0);
		return FALSE;
	}
	*(FARPROC*)RealSkeet_VA(0x140B048) = ::GetProcAddress(hDll,"malloc");
	if(!*(FARPROC*)RealSkeet_VA(0x140B048))
		return FALSE;

	hDll = ::LoadLibraryA("api-ms-win-crt-math-l1-1-0.dll");
	if(!hDll)
	{
#ifdef _DEBUG
		MessageBoxA(NULL,
			"Please copy the dependent DLL \"api-ms-win-crt-math-l1-1-0.dll\" to the working directory.",
			"Load DLL Failed",MB_OK|MB_ICONERROR);
#endif
		ASSERT(0);
		return FALSE;
	}
	*(FARPROC*)RealSkeet_VA(0x140B050) = ::GetProcAddress(hDll,"__setusermatherr");
	if(!*(FARPROC*)RealSkeet_VA(0x140B050))
		return FALSE;

	hDll = ::LoadLibraryA("api-ms-win-crt-locale-l1-1-0.dll");
	if(!hDll)
	{
#ifdef _DEBUG
		MessageBoxA(NULL,
			"Please copy the dependent DLL \"api-ms-win-crt-locale-l1-1-0.dll\" to the working directory.",
			"Load DLL Failed",MB_OK|MB_ICONERROR);
#endif
		ASSERT(0);
		return FALSE;
	}
	*(FARPROC*)RealSkeet_VA(0x140B058) = ::GetProcAddress(hDll,"_configthreadlocale");
	if(!*(FARPROC*)RealSkeet_VA(0x140B058))
		return FALSE;

	hDll = ::LoadLibraryA("WTSAPI32.dll");
	if(!hDll)
	{
#ifdef _DEBUG
		MessageBoxA(NULL,
			"Please copy the dependent DLL \"WTSAPI32.dll\" to the working directory.",
			"Load DLL Failed",MB_OK|MB_ICONERROR);
#endif
		ASSERT(0);
		return FALSE;
	}
	*(FARPROC*)RealSkeet_VA(0x140B060) = ::GetProcAddress(hDll,"WTSSendMessageW");
	if(!*(FARPROC*)RealSkeet_VA(0x140B060))
		return FALSE;

	hDll = ::LoadLibraryA("KERNEL32.dll");
	if(!hDll)
	{
#ifdef _DEBUG
		MessageBoxA(NULL,
			"Please copy the dependent DLL \"KERNEL32.dll\" to the working directory.",
			"Load DLL Failed",MB_OK|MB_ICONERROR);
#endif
		ASSERT(0);
		return FALSE;
	}
	*(FARPROC*)RealSkeet_VA(0x140B068) = ::GetProcAddress(hDll,"GetCurrentProcess");
	if(!*(FARPROC*)RealSkeet_VA(0x140B068))
		return FALSE;

	hDll = ::LoadLibraryA("USER32.dll");
	if(!hDll)
	{
#ifdef _DEBUG
		MessageBoxA(NULL,
			"Please copy the dependent DLL \"USER32.dll\" to the working directory.",
			"Load DLL Failed",MB_OK|MB_ICONERROR);
#endif
		ASSERT(0);
		return FALSE;
	}
	*(FARPROC*)RealSkeet_VA(0x140B070) = ::GetProcAddress(hDll,"CharUpperBuffW");
	if(!*(FARPROC*)RealSkeet_VA(0x140B070))
		return FALSE;

	hDll = ::LoadLibraryA("ADVAPI32.dll");
	if(!hDll)
	{
#ifdef _DEBUG
		MessageBoxA(NULL,
			"Please copy the dependent DLL \"ADVAPI32.dll\" to the working directory.",
			"Load DLL Failed",MB_OK|MB_ICONERROR);
#endif
		ASSERT(0);
		return FALSE;
	}
	*(FARPROC*)RealSkeet_VA(0x140B078) = ::GetProcAddress(hDll,"RegQueryValueExA");
	if(!*(FARPROC*)RealSkeet_VA(0x140B078))
		return FALSE;

	hDll = ::LoadLibraryA("KERNEL32.dll");
	if(!hDll)
	{
#ifdef _DEBUG
		MessageBoxA(NULL,
			"Please copy the dependent DLL \"KERNEL32.dll\" to the working directory.",
			"Load DLL Failed",MB_OK|MB_ICONERROR);
#endif
		ASSERT(0);
		return FALSE;
	}
	*(FARPROC*)RealSkeet_VA(0x140B080) = ::GetProcAddress(hDll,"LocalAlloc");
	if(!*(FARPROC*)RealSkeet_VA(0x140B080))
		return FALSE;
	*(FARPROC*)RealSkeet_VA(0x140B084) = ::GetProcAddress(hDll,"GetCurrentProcess");
	if(!*(FARPROC*)RealSkeet_VA(0x140B084))
		return FALSE;
	*(FARPROC*)RealSkeet_VA(0x140B088) = ::GetProcAddress(hDll,"GetCurrentThread");
	if(!*(FARPROC*)RealSkeet_VA(0x140B088))
		return FALSE;
	*(FARPROC*)RealSkeet_VA(0x140B08C) = ::GetProcAddress(hDll,"LocalFree");
	if(!*(FARPROC*)RealSkeet_VA(0x140B08C))
		return FALSE;
	*(FARPROC*)RealSkeet_VA(0x140B090) = ::GetProcAddress(hDll,"GetModuleFileNameW");
	if(!*(FARPROC*)RealSkeet_VA(0x140B090))
		return FALSE;
	*(FARPROC*)RealSkeet_VA(0x140B094) = ::GetProcAddress(hDll,"GetProcessAffinityMask");
	if(!*(FARPROC*)RealSkeet_VA(0x140B094))
		return FALSE;
	*(FARPROC*)RealSkeet_VA(0x140B098) = ::GetProcAddress(hDll,"SetProcessAffinityMask");
	if(!*(FARPROC*)RealSkeet_VA(0x140B098))
		return FALSE;
	*(FARPROC*)RealSkeet_VA(0x140B09C) = ::GetProcAddress(hDll,"SetThreadAffinityMask");
	if(!*(FARPROC*)RealSkeet_VA(0x140B09C))
		return FALSE;
	*(FARPROC*)RealSkeet_VA(0x140B0A0) = ::GetProcAddress(hDll,"Sleep");
	if(!*(FARPROC*)RealSkeet_VA(0x140B0A0))
		return FALSE;
	*(FARPROC*)RealSkeet_VA(0x140B0A4) = ::GetProcAddress(hDll,"ExitProcess");
	if(!*(FARPROC*)RealSkeet_VA(0x140B0A4))
		return FALSE;
	*(FARPROC*)RealSkeet_VA(0x140B0A8) = ::GetProcAddress(hDll,"GetLastError");
	if(!*(FARPROC*)RealSkeet_VA(0x140B0A8))
		return FALSE;
	*(FARPROC*)RealSkeet_VA(0x140B0AC) = ::GetProcAddress(hDll,"FreeLibrary");
	if(!*(FARPROC*)RealSkeet_VA(0x140B0AC))
		return FALSE;
	*(FARPROC*)RealSkeet_VA(0x140B0B0) = ::GetProcAddress(hDll,"LoadLibraryA");
	if(!*(FARPROC*)RealSkeet_VA(0x140B0B0))
		return FALSE;
	*(FARPROC*)RealSkeet_VA(0x140B0B4) = ::GetProcAddress(hDll,"GetModuleHandleA");
	if(!*(FARPROC*)RealSkeet_VA(0x140B0B4))
		return FALSE;
	*(FARPROC*)RealSkeet_VA(0x140B0B8) = ::GetProcAddress(hDll,"GetProcAddress");
	if(!*(FARPROC*)RealSkeet_VA(0x140B0B8))
		return FALSE;

	hDll = ::LoadLibraryA("ADVAPI32.dll");
	if(!hDll)
	{
#ifdef _DEBUG
		MessageBoxA(NULL,
			"Please copy the dependent DLL \"ADVAPI32.dll\" to the working directory.",
			"Load DLL Failed",MB_OK|MB_ICONERROR);
#endif
		ASSERT(0);
		return FALSE;
	}
	*(FARPROC*)RealSkeet_VA(0x140B0C0) = ::GetProcAddress(hDll,"OpenSCManagerW");
	if(!*(FARPROC*)RealSkeet_VA(0x140B0C0))
		return FALSE;
	*(FARPROC*)RealSkeet_VA(0x140B0C4) = ::GetProcAddress(hDll,"EnumServicesStatusExW");
	if(!*(FARPROC*)RealSkeet_VA(0x140B0C4))
		return FALSE;
	*(FARPROC*)RealSkeet_VA(0x140B0C8) = ::GetProcAddress(hDll,"OpenServiceW");
	if(!*(FARPROC*)RealSkeet_VA(0x140B0C8))
		return FALSE;
	*(FARPROC*)RealSkeet_VA(0x140B0CC) = ::GetProcAddress(hDll,"QueryServiceConfigW");
	if(!*(FARPROC*)RealSkeet_VA(0x140B0CC))
		return FALSE;
	*(FARPROC*)RealSkeet_VA(0x140B0D0) = ::GetProcAddress(hDll,"CloseServiceHandle");
	if(!*(FARPROC*)RealSkeet_VA(0x140B0D0))
		return FALSE;

	*(FARPROC*)&fInitData = (FARPROC)&RealSkeet_InitData[0];
	fInitData(g_hRealSkeet,RealSkeet_RVA,NULL);

	return TRUE;
}


